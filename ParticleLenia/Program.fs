open System.Diagnostics
open DiffSharp

dsharp.config(device=Device.CPU, backend=Backend.Torch)

/// Computes the value of a Gaussian peak at the given point with
/// the given mean and standard deviation.
let peak_f (x : Tensor) (mu : float (*mean*)) (sigma : float (*std dev*)) =
    exp -(((x-mu)/sigma)**2)

let mu_k = 4.0
let sigma_k = 1.0
let w_k = 0.022
let mu_g = 0.6
let sigma_g = 0.15
let c_rep = 1.0

let square x = x * x

let fields_f_pair (points : Tensor) (x : Tensor) =
    let x_expanded =   // expand x to match points
        let shape =
            Array.append
                x.shape[0 .. x.shape.Length - 2]
                points.shape
        x.unsqueeze(-2).expand(shape)
    let diff = square(x_expanded-points).sum(-1)
    let r = sqrt(diff.clamp(1e-10))
    let U = (peak_f r mu_k sigma_k).sum(-1)*w_k
    let G = peak_f U mu_g sigma_g
    let R = c_rep/2.0 * ((1.0-r).clamp(0.0)**2).sum(-1)
    diff, {| U=U; G=G; R=R; E=R-G |}

let fields_f points x =
    fields_f_pair points x |> snd

let vmap f (inputs : Tensor) =
    Array.init inputs.shape[0] id
        |> Array.Parallel.map (fun i ->
            f inputs[i])
        |> dsharp.stack

let motion_f points =
    let grad_E = dsharp.grad (fun x -> (fields_f points x).E)
    -(vmap grad_E points)
(*
let points0 =
    (dsharp.rand([200; 2]) - 0.5) * 12.0
*)
let points0 =
    dsharp.tensor
        [[ 4.9997635 ; -4.116155  ]
         [-3.9093833 ;  4.960111  ]
         [ 1.4003348 ; -0.04963017]
         [-2.0949512 ; -5.1570697 ]
         [-1.7368712 ;  5.504568  ]
         [-3.2013173 ;  4.169286  ]
         [-1.2890725 ;  2.1253796 ]
         [-0.63305855; -1.1844163 ]
         [ 5.711529  ;  1.6570287 ]
         [-1.8185105 ; -3.0470996 ]
         [ 5.679667  ; -4.7615905 ]
         [-2.5780578 ; -5.4765143 ]
         [-4.777518  ;  4.71806   ]
         [-3.7641392 ; -2.8256521 ]
         [-2.545588  ; -2.066979  ]
         [-2.537743  ; -0.07365704]
         [ 2.7605953 ; -5.0314236 ]
         [ 0.3925538 ;  0.74629927]
         [-1.9910731 ; -0.62747097]
         [-5.462913  ; -5.322906  ]
         [ 3.9114919 ;  1.1505675 ]
         [-4.6921964 ; -0.6116066 ]
         [-4.9090075 ; -2.5639372 ]
         [-1.7788897 ;  1.7337356 ]
         [ 5.6928635 ;  3.2227778 ]
         [ 5.4140296 ;  0.12809086]
         [ 2.0293636 ; -1.1529694 ]
         [ 1.119195  ;  0.98742485]
         [-4.521229  ;  3.6817446 ]
         [ 4.330872  ; -5.599876  ]
         [-2.553626  ;  0.33841467]
         [-5.340397  ;  0.628222  ]
         [ 5.886871  ;  5.7901297 ]
         [-5.274748  ; -0.8896365 ]
         [ 4.9860477 ; -0.08502245]
         [ 3.0679965 ;  4.754976  ]
         [-0.17955351; -2.8123698 ]
         [-0.6526351 ;  1.0499167 ]
         [ 2.4003897 ; -0.5279188 ]
         [-1.12711   ; -2.8203464 ]
         [-1.8366437 ; -5.476028  ]
         [-1.5807209 ; -4.670321  ]
         [ 2.8981733 ;  4.1023393 ]
         [-3.0016937 ;  2.7043262 ]
         [-2.8198729 ; -4.3537817 ]
         [ 0.7802439 ; -4.720901  ]
         [ 5.866732  ;  4.6421185 ]
         [-5.664345  ; -4.385373  ]
         [ 5.0629034 ; -2.2753315 ]
         [ 4.579106  ;  1.1025052 ]
         [ 3.4757566 ; -2.8536515 ]
         [ 1.6322551 ;  1.1147318 ]
         [ 3.3028636 ;  2.7925801 ]
         [-2.4421177 ; -1.7551575 ]
         [ 1.6350918 ; -0.70355844]
         [ 1.1352925 ;  2.4335804 ]
         [ 5.298982  ;  5.036     ]
         [-4.605563  ; -3.9294863 ]
         [ 4.999586  ; -0.14399815]
         [-4.7138042 ; -5.1518297 ]
         [ 1.741602  ;  2.0698714 ]
         [-5.6984797 ; -4.123571  ]
         [-4.012636  ; -4.673567  ]
         [-1.2528949 ; -0.9079313 ]
         [ 4.5518603 ;  3.1545382 ]
         [-3.652761  ; -4.2992964 ]
         [-4.6485615 ;  4.27685   ]
         [-0.46915913;  5.0593214 ]
         [ 5.798032  ;  5.214187  ]
         [-0.4931202 ; -1.321641  ]
         [ 5.819046  ; -4.2213006 ]
         [ 1.7945924 ;  0.4003501 ]
         [-5.649001  ;  2.710868  ]
         [-3.1489735 ;  4.7483582 ]
         [ 0.038764  ; -2.0858617 ]
         [ 0.30027437; -2.8056507 ]
         [-3.046646  ;  0.48955822]
         [ 4.642569  ; -2.1708727 ]
         [ 5.2542243 ; -5.6751094 ]
         [ 4.945457  ;  3.4486456 ]
         [ 4.7786865 ;  4.8390183 ]
         [ 1.8142891 ;  3.259406  ]
         [-3.150085  ; -4.962626  ]
         [-3.3710089 ; -0.4151101 ]
         [ 5.0466685 ; -5.7264905 ]
         [ 0.22994184; -1.1324959 ]
         [ 1.3694787 ; -0.8645625 ]
         [ 4.1600504 ;  5.574141  ]
         [-5.878039  ;  1.8451409 ]
         [ 0.402915  ;  4.4993134 ]
         [ 0.42791033;  2.8281355 ]
         [-1.5167456 ; -3.177568  ]
         [-0.40857983;  0.68592024]
         [ 2.3539681 ; -4.477647  ]
         [ 1.0075178 ;  1.8395963 ]
         [ 0.01822042; -1.5849752 ]
         [-0.8655124 ;  4.4765525 ]
         [ 0.90515757; -0.9189062 ]
         [ 4.8679433 ;  0.89624834]
         [-3.8890958 ; -5.4051676 ]
         [ 1.1844707 ; -4.956555  ]
         [-1.6718102 ;  1.4642544 ]
         [ 1.3477535 ;  4.7837033 ]
         [ 1.129911  ;  4.832448  ]
         [ 0.05796289;  5.6236053 ]
         [ 2.4687052 ;  0.4487157 ]
         [ 4.9348125 ; -1.478651  ]
         [ 4.6152678 ;  0.8839488 ]
         [-3.748342  ; -2.5335531 ]
         [-1.0630331 ;  3.4757252 ]
         [-0.59555626; -3.1701307 ]
         [ 1.7458434 ; -5.9248595 ]
         [ 3.8124619 ;  4.296594  ]
         [-0.6646986 ;  2.7132425 ]
         [ 0.22111273; -1.5885415 ]
         [ 4.8623185 ;  4.2655177 ]
         [ 0.10884762;  3.1741333 ]
         [ 5.3374887 ; -2.3216429 ]
         [-0.915709  ;  3.0836935 ]
         [ 2.0787091 ; -4.3585453 ]
         [ 1.5419483 ;  4.743788  ]
         [-3.6812267 ; -2.2646527 ]
         [ 0.03988695;  5.381338  ]
         [ 5.8552766 ;  1.6564894 ]
         [ 4.7280536 ;  5.8457522 ]
         [-4.2516704 ;  4.4343166 ]
         [ 0.34549713; -5.780199  ]
         [ 4.314544  ;  5.5553026 ]
         [ 5.2233596 ;  3.2974677 ]
         [-0.870316  ; -1.8480477 ]
         [ 1.9586406 ;  5.642056  ]
         [ 5.878508  ; -5.400142  ]
         [ 4.700522  ; -0.3352561 ]
         [ 4.1208916 ; -4.222754  ]
         [-3.0790672 ;  2.1475282 ]
         [ 2.9743538 ;  3.35717   ]
         [-1.1829543 ;  3.988306  ]
         [ 4.0926504 ; -2.2063065 ]
         [-2.9532552 ; -3.8296795 ]
         [-4.756578  ; -1.6410971 ]
         [ 4.6675286 ; -5.3615055 ]
         [-5.4959693 ;  3.4061165 ]
         [ 3.7864609 ; -4.4340863 ]
         [ 2.3540254 ;  4.740592  ]
         [-0.58450985; -0.40214682]
         [-2.7410746 ;  4.5949216 ]
         [-1.5609355 ;  4.8619094 ]
         [-5.5548964 ;  4.167466  ]
         [ 4.0004826 ; -5.060593  ]
         [-3.152567  ; -2.311316  ]
         [ 5.0062523 ;  0.47078276]
         [ 5.3844066 ; -3.1912951 ]
         [ 4.7313967 ;  4.433274  ]
         [-0.6668887 ; -4.9074926 ]
         [ 1.1544199 ; -0.48069906]
         [ 1.037334  ;  4.737488  ]
         [-0.2301364 ;  3.9808702 ]
         [-0.45620155;  4.705649  ]
         [ 5.083264  ; -4.6464443 ]
         [-3.67303   ;  0.92145824]
         [ 5.9153023 ; -4.2540164 ]
         [ 5.570117  ;  2.7867036 ]
         [ 0.552618  ;  0.09602022]
         [ 1.9668689 ; -5.519637  ]
         [-0.59540606;  3.450235  ]
         [ 4.921283  ; -3.7496252 ]
         [-0.34132576;  5.7123585 ]
         [-4.8489704 ;  0.47023916]
         [-3.0808911 ; -3.9394426 ]
         [-0.2539673 ; -2.2301373 ]
         [ 0.43882656;  5.0677056 ]
         [-4.0853076 ;  5.155469  ]
         [ 1.3825765 ; -0.6867485 ]
         [ 0.7014713 ; -5.253516  ]
         [ 4.024555  ; -1.7397909 ]
         [-5.4876623 ; -3.3253684 ]
         [ 0.6349726 ;  4.5666304 ]
         [ 2.1679115 ;  4.128987  ]
         [-1.4070382 ;  3.1553621 ]
         [ 4.6008396 ;  2.5317178 ]
         [-5.0729313 ; -1.9057503 ]
         [ 4.8197594 ;  0.11888981]
         [-2.2828217 ;  0.6969595 ]
         [ 0.8858671 ;  5.9470997 ]
         [ 5.2514505 ;  5.334589  ]
         [ 4.4223776 ;  4.7082725 ]
         [ 2.076695  ;  4.0945845 ]
         [ 2.0006475 ;  2.0411754 ]
         [ 1.6830196 ; -3.179874  ]
         [-5.8820314 ; -2.6619158 ]
         [ 0.852489  ;  2.24572   ]
         [-3.9588375 ; -4.501622  ]
         [-1.7374735 ; -3.2745953 ]
         [ 4.649264  ;  5.027341  ]
         [-5.121546  ; -0.6008849 ]
         [ 0.23074293;  2.1636543 ]
         [-2.2660432 ; -0.22554302]
         [ 0.30289793;  2.339377  ]
         [-4.198065  ;  1.9584975 ]
         [ 3.5800395 ;  1.1206727 ]]
let dt = 0.1

let odeint_euler f x0 dt n =
    let step_f x _ =
        x+dt*(f x)
    Seq.scan step_f x0 [1..n]

type VideoWriter(fps, filename) =

    let mutable ffmpeg = None

    member this.add(img : Tensor) =
        let h, w = img.shape[0], img.shape[1]
        if ffmpeg = None then
            let startInfo =
                ProcessStartInfo(
                    FileName = "/Users/brian/Downloads/ffmpeg-7.1.1-essentials_build/bin/ffmpeg",
                    Arguments = $"-y -f rawvideo -vcodec rawvideo -s {w}x{h} -pix_fmt rgb24 -r {fps} -i - -pix_fmt yuv420p -c:v libx264 -crf 20 {filename}",
                    RedirectStandardInput = true,
                    UseShellExecute = false,
                    CreateNoWindow = false)
            let proc = Process.Start(startInfo)
            ffmpeg <- Some proc.StandardInput.BaseStream
        let img = (img.clamp(0, 1) * 255).cast(Dtype.Byte)
        ffmpeg.Value.Write(img.flatten().toArray1D<byte>())

let mgrid (startX : float) (stopX : float) numX (startY : float) (stopY : float) numY =
    let x = dsharp.linspace(startX, stopX, numX)
    let y = dsharp.linspace(startY, stopY, numY)
    let xGrid = x.unsqueeze(0).expand([numY; numX])
    let yGrid = y.unsqueeze(1).expand([numY; numX])
    dsharp.stack([xGrid; yGrid], dim=2)

let cmap_e e =
    let clamped = dsharp.stack([e; -e], dim=2).clamp(0)
    let colorTransformMatrix = dsharp.tensor([[0.3; 1.0; 1.0]; [1.0; 0.3; 1.0]])
    1.0 - dsharp.matmul(clamped, colorTransformMatrix)

let show_lenia (points : Tensor) extent =
    let w = 400
    let xy = mgrid -1.0 1.0 w -1.0 1.0 w * extent
    let e0 = -peak_f (dsharp.tensor 0.0) mu_g sigma_g
    let f = fields_f_pair points
    let diff, fields = f xy
    let r2 = diff.min(diff.shape.Length - 1)   // index -1 not allowed
    let points_mask = (r2/0.02).clamp(0, 1.0).unsqueeze(-1)
    cmap_e (fields.E - e0) * points_mask

let animate_lenia tracks name =
    let vid = VideoWriter(60, name)
    let extent = dsharp.abs(tracks).max()*1.2
    let bar_len = tracks.shape[0]
    for i = 0 to bar_len - 1 do
        let points = tracks[i]
        if i % 10 = 0 then
            let img = show_lenia points extent
            vid.add(img)

let rotor_story =
    odeint_euler motion_f points0 dt 10000
        |> Seq.skip 1
        |> dsharp.stack
animate_lenia rotor_story "rotor.mp4"
